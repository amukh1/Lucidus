import "include.luci" // import luci file that includes useful declarations.
import "structures.luci" // import luci file that includes useful structures and algorithms.

dec main() -> int; // declaration. return type int, no params.
def main() -> int { // definition. Includes declaration.
    printf("Hello, World!\n"); // c std library is included.
    
    // variables
    x:int = 4; // :int defines the type.
    y := 5; // type is inferred, := syntax is used.

    // assignment
    x = 5; // assignment expects a pointer to be assigned to.
    x = (y + 1); // expressions are loaded. (ptr x) = (ptr y) is incorrect. (unless, ofcourse, x is int*)

    printf("%d\n", x); // printf is a function that takes a format string and a variable number of arguments.
    printf("%d\n", y);

    // control flow > if
    if(x == y) -> {
        printf("x is equal to y\n");
    }
    // else
    if(x != y) -> {
        printf("x is not equal to y\n");
    }

    // type casting
    z:float = 1.2;
    (ptr z) = x->(float);

    // arrays
    arr:int* = malloc(10 * sizeof int)->(int*); // mallocate array of ints of size 10.'
    arr[0] = 1; // access array elements.
    arr[1] = 2;

    // control flow > while
    i:int = 0;
    while(i < 11) -> {
        arr[i] = i;
        i = i + 1;
    }
    i = 0;
    while(i < 11) -> {
        printf("%d\n", arr[i]);
        i = i + 1;
    }

    // multi-dimensional arrays
    arr2:int** = malloc(10 * sizeof int*)->(int**); // mallocate array of int pointers of size 10.
    i = 0;
    j := 0;
    while(i < 10) -> {
        arr2[i] = malloc(10 * sizeof int)->(int*); // mallocate array of ints of size 10.
        i = i + 1;
    }
    i = 0;
    while(i < 10) -> {
        j = 0;
        while(j < 10) -> {
            arr2[i][j] = i + j;
            j = j + 1;
        }
        i = i + 1;
    }
    i = 0;
    while(i < 10) -> {
        j = 0;
        while(j < 10) -> {
            printf("%d | ", arr2[i][j]);
            j = j + 1;
        }
        printf("\n");
        i = i + 1;
    }


    return 0;
}
