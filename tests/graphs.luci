import "include.luci"
import "structures.luci"

dec main() -> int;
def main() -> int {
    // graph G setup
    G:Graph = malloc(16)->(Graph);
    G.nodesc = 3;
    G.edgesc = 2;

    G.edges = malloc(20)->(Pair*);
    G.edges[0] = malloc(8)->(Pair);
    G.edges[1] = malloc(8)->(Pair);
    G.edges[0].first = 1;
    G.edges[0].second = 2;
    G.edges[1].first = 4;
    G.edges[1].second = 10;

    // graph H setup
    H:Graph = malloc(16)->(Graph);
    H.nodesc = 3;
    H.edgesc = 2;

    H.edges = malloc(20)->(Pair*);
    H.edges[0] = malloc(8)->(Pair);
    H.edges[1] = malloc(8)->(Pair);
    H.edges[0].first = 1;
    H.edges[0].second = 2;
    H.edges[1].first = 4;
    H.edges[1].second = 10;

    printEdgeList(G);
    printf("--------------------\n");
    printEdgeList(H);
    printf("--------------------\n");

    // gen_all_permutations(1);
    // k:Permutation* = gen_all_permutations(2);
    // log all permutations of 2
    

    // gen_all_permutations(3);

    // check if G and H are isomorphic
    // if(isIsomorphic(G, H) == 1) -> {
    //     printf("G and H are isomorphic\n");
    // } 
    // if(isIsomorphic(G, H) == 0) -> {
    //     printf("G and H are not isomorphic\n");
    // }

    printf("%d\n", factorial(6));
    
    return 0;
}