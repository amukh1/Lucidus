import "include.luci"
import "structures.luci"

dec main() -> int;
def main() -> int {
    // graph G setup
    G:Graph = malloc(16)->(Graph);
    G->nodesc = 3;
    G->edgesc = 2;

    G->edges = malloc(20)->(int**);
    getEdge(G,0) = malloc(8)->(int*);
    getEdge(G,1) = malloc(8)->(int*);
    getEdgeTuple(G, 0, 0) = 4;
    getEdgeTuple(G, 0, 1) = 10;
    getEdgeTuple(G, 1, 0) = 1;
    getEdgeTuple(G, 1, 1) = 2;

    // graph H setup
    H:Graph = malloc(16)->(Graph);
    H->nodesc = 3;
    H->edgesc = 2;

    H->edges = malloc(20)->(int**);
    getEdge(H,0) = malloc(8)->(int*);
    getEdge(H,1) = malloc(8)->(int*);
    getEdgeTuple(H, 0, 0) = 1;
    getEdgeTuple(H, 0, 1) = 2;
    getEdgeTuple(H, 1, 0) = 10;
    getEdgeTuple(H, 1, 1) = 4;

    printEdgeList(G);
    printf("--------------------\n");
    printEdgeList(H);
    printf("--------------------\n");

    gen_all_permutations(1);
    gen_all_permutations(2);
    // gen_all_permutations(3);

    // check if G and H are isomorphic
    // if(isIsomorphic(G, H) == 1) -> {
    //     printf("G and H are isomorphic\n");
    // } 
    // if(isIsomorphic(G, H) == 0) -> {
    //     printf("G and H are not isomorphic\n");
    // }

    // printf("%d\n", factorial(6));
    
    return 0;
}